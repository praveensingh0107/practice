package intbit.dp;

/**
 * Repeating Sub-Sequence
 * Asked in:
 * Google
 * Given a string A, find if there is any subsequence that repeats itself.
 * <p>
 * A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.
 * <p>
 * NOTE : sub-sequence length should be greater than or equal to 2.
 * <p>
 * <p>
 * <p>
 * Input Format:
 * <p>
 * The first and the only argument of input contains a string A.
 * Output Format:
 * <p>
 * Return an integer, 0 or 1:
 * => 0 : False
 * => 1 : True
 * Constraints:
 * <p>
 * 1 <= length(A) <= 100
 * Examples:
 * <p>
 * Input 1:
 * A = "abab"
 * <p>
 * Output 1:
 * 1
 * <p>
 * Explanation 1:
 * "ab" is repeated.
 * <p>
 * Input 2:
 * A = "abba"
 * <p>
 * Output 2:
 * 0
 * <p>
 * Explanation 2:
 * There is no repeating subsequence.
 */
public class RepeatingSubsequence {
    public int anytwo(String A) {
        if (A == null)
            return 0;
        int[][] dp = new int[A.length() + 1][A.length() + 1];
        for (int r = 1; r <= A.length(); r++) {
            for (int c = 1; c <= A.length(); c++) {
                if (A.charAt(r - 1) == A.charAt(c - 1) && (r != c)) {
                    dp[r][c] = 1 + dp[r - 1][c - 1];
                } else {
                    dp[r][c] = Math.max(dp[r][c - 1], dp[r - 1][c]);
                }
            }
        }
        return dp[A.length()][A.length()] > 1 ? 1 : 0;
    }

    /**
     * special LCS where indexes on both strings should not be same
     */
    private int getLCS(String a, String b) {
        int[][] dp = new int[a.length() + 1][b.length() + 1];
        for (int r = 1; r <= a.length(); r++) {
            for (int c = 1; c <= b.length(); c++) {
                if (a.charAt(r - 1) == b.charAt(c - 1) && (r != c)) {
                    dp[r][c] = 1 + dp[r - 1][c - 1];
                } else {
                    dp[r][c] = Math.max(dp[r][c - 1], dp[r - 1][c]);
                }
            }
        }
        return dp[a.length()][b.length()];
    }

    public static void main(String[] args) {
        RepeatingSubsequence obj = new RepeatingSubsequence();
        /*System.out.println(obj.anytwo("mabab"));
        System.out.println(obj.anytwo("abba"));
        System.out.println(obj.anytwo("abab"));
        System.out.println(obj.anytwo("abba"));*/
        System.out.println(obj.anytwo("aaa"));
    }
}
